tosca_definitions_version: tosca_simple_yaml_1_3

metadata:

  template_name: Crucible Profile
  template_author: Crucible

namespace: crucible

data_types:

  IP:
    derived_from: string

  IPAndPort:
    derived_from: string

  Subnet:
    derived_from: string

  MAC:
    derived_from: string

capability_types:

  Cluster: {}

  Bastion: {}

  BMC:
    properties:
      mac:
        type: MAC
        required: false
      ip:
        type: IPAndPort
        required: false

  # Services

  Service:
    properties:
      install:
        type: boolean
        default: false

  DNS:
    derived_from: Service

  NTP:
    derived_from: Service

  ChronyNTP:
    derived_from: NTP
    properties:
      allow:
        type: Subnet
        required: false

  Store:
    derived_from: Service

  HTTPStore:
    derived_from: Store

  Registry:
    derived_from: Service

  SimpleRegistry:
    derived_from: Registry
    properties:
      # REMODEL: The local mirror registry is only needed for Restricted Network installations.
      # Suggestion: let's add a boolean property for RNI to the cluster definition instead.
      use-local-mirror-registry:
        type: boolean
        default: false

  Quay:
    description: >-
      Currently unsupported
    derived_from: Registry

  AssistedInstaller:
    derived_from: Service
    properties:
      discovery-iso-name:
        type: string
        default: discovery/discovery-image.iso
      repo-root-path:
        type: string
        default: /home/redhat/crucible/
      fetched-dest:
        type: string
        default: "{{ repo_root_path }}/fetched"
      vip-dhcp-allocation:
        type: boolean
        default: false

  Hypervisor:
    derived_from: Service
    properties:
      virtual-bmc-port:
        type: integer

  KVM:
    description: >-
      Though any node can have this capability, we mandate that the node has
      a requirement called "kvm-dns" for a DNS capability type.
    derived_from: Hypervisor
    properties:
      ansible-user:
        type: string
        default: root
      images-dir:
        type: string
        default: /home/redhat/libvirt/images
      bridge-ip:
        type: IP
      bridge-interface:
        type: string

relationship_types:

  Installed:
    properties:
      installation-disk:
        type: string
        required: false

node_types:

  Node:
    properties:
      ip:
        type: IP

  Machine:
    derived_from: Node
    properties:
      mac:
        type: MAC
      vendor:
        type: string
    capabilities:
      bmc:
        type: BMC
        occurrences: [ 0, 1 ]

  Baremetal:
    derived_from: Machine

  VM:
    derived_from: Machine
    properties:
      vendor:
        type: string
        default: KVM
      cpu-cores:
        type: integer
      ram:
        type: scalar-unit.size
      disk:
        type: scalar-unit.size
    requirements:
    - hypervisor: Hypervisor

  Cluster:
    properties:
      name:
        type: string
      version:
        type: string
      api-vip:
        description: >-
          The IP address to be used for api.clustername.example.lab and api-int.clustername.example.lab
        type: IP
        default: 10.60.0.96
      ingress-vip:
        description: >-
          The IP address to be used for *.apps.clustername.example.lab
        type: IP
        default: 10.60.0.97
      machine-network:
        description: >-
          The subnet on which all nodes are (or will be) accessible.
        type: Subnet
        default: 10.60.0.0/24
      service-network:
        description: >-
          The IP address pool to use for service IP addresses.
        type: Subnet
        default: 172.30.0.0/16
      cluster-network:
        description: >-
          The subnet, internal to the cluster, on which pods will be assigned IPs.
        type: Subnet
        default: 10.128.0.0/14
      cluster-network-host-prefix:
        description: >-
          The subnet prefix length to assign to each individual node.
        type: integer
        default: 23
    capabilities:
      cluster: Cluster
    requirements:
    - bastion:
        capability: Bastion
        node: Node
        occurrences: [ 1, 1 ]
    # Services
    - dns:
        capability: DNS
        node: Node
        occurrences: [ 1, 1 ]
    - ntp:
        capability: NTP
        node: Node
        occurrences: [ 1, 1 ]
    - store:
        capability: Store
        node: Node
        occurrences: [ 1, 1 ]
    - registry:
        capability: Registry
        node: Node
        occurrences: [ 1, 1 ]
    - ai:
        capability: AssistedInstaller
        node: Node
        occurrences: [ 1, 1 ]
    # Machines
    - master:
        capability: BMC
        node: Machine
        relationship: Installed
        occurrences: [ 0, UNBOUNDED ]
    - worker:
        capability: BMC
        node: Machine
        relationship: Installed
        occurrences: [ 0, UNBOUNDED ]
    # TODO: is this the best way to handle SNO?
    - sno:
        capability: BMC
        node: Machine
        relationship: Installed
        occurrences: [ 0, 1 ]

  Bastion:
    description: >-
      A node that has Ansible to run the Crucible playbooks as well as
      local space to optionally store secrets and images
    derived_from: Node
    properties:
      ip:
        type: IP
      # Pull secrets (for what??)
      pull-secret-lookup-paths:
        type: list
        entry_schema: string
        default:
        - "{{ fetched_dest }}/pull-secret.txt"
        - "{{ repo_root_path }}/pull-secret.txt"
      # Outputs
      ssh-keypair-dest-base-dir:
        description: >-
          Bastion stores key-pairs here to connect to all cluster hosts
        type: string
        default: /home/redhat
      kubeconfig-dest-dir:
        type: string
        default: /home/redhat
    capabilities:
      type: Bastion

  # Useful common node types

  NTP:
    derived_from: Node
    capabilities:
      ntp: NTP

  Store:
    derived_from: Node
    capabilities:
      store: Store

  Registry:
    derived_from: Node
    capabilities:
      registry: Registry

  AssistedInstaller:
    derived_from: Node
    capabilities:
      dns: AssistedInstaller

  KVM:
    derived_from: Baremetal
    capabilities:
      hypervisor: KVM
    requirements:
    - kvm-dns: # The KVM capability mandates this requirement
        capability: DNS
        node: Node
        occurrences: [ 1, 1 ]

  ServiceMachine:
    description: >-
      "All-in-one": a node that will have all the required and optional capabilities installed by default
      with the simplest implementations. Users can create their own set of types that distribute these and
      other capabilities differently.
    derived_from: Node
    capabilities:
      dns:
        type: DNS
        properties:
          install:
            type: boolean
            default: true
      ntp:
        type: ChronyNTP
        properties:
          install:
            type: boolean
            default: true
      store:
        type: HTTPStore
        properties:
          install:
            type: boolean
            default: true
      registry:
        type: SimpleRegistry
        properties:
          install:
            type: boolean
            default: true
      ai:
        type: AssistedInstaller
        properties:
          install:
            type: boolean
            default: true
      hypervisor:
        type: KVM
        properties:
          install:
            type: boolean
            default: true
    requirements:
    - kvm-dns: # The KVM capability mandates this requirement
        capability: DNS
        node: Node
        occurrences: [ 1, 1 ]

group_types:

  Nodes:
    members:
    - Node

policy_types:

  BMC:
    targets:
    - Machine
    - Nodes

  Redfish:
    derived_from: BMC
    properties:
      user:
        type: string
      password:
        type: string

artifact_types:

  Key: {}
